{
  "File body": {
    "scope": "python",
    "prefix": "synfile",
    "body": [
      "\"\"\"${1:Module description}\n\nCOPYRIGHT BY SYNERGETIK GMBH\nThe copyright of this source code(s) herein is the property of\nSynergetik GmbH, Schiffweiler, Germany. (www.synergetik.de)\nThe program(s) may be used only with the written permission of\nSynergetik GmbH or in accordance with the terms and conditions stipulated\nin an agreement/contract under which the program(s) have been supplied.\nExamples (not exclusive) of restrictions:\n    - all sources are confidential and under NDA\n    - giving these sources to other people/companies is not allowed\n    - Using these sources in other projects is not allowed\n    - copying parts of these sources is not allowed\n    - changing these sources is not allowed\n\"\"\"",
      "",
      "__author__ = \"${2:Author}\"",
      "__copyright__ = \"Synergetik GmbH\"",
      "",
      "# -----------------------------------------------------------------------------",
      "# -- module import",
      "# -----------------------------------------------------------------------------",
      "",
      "import logging",
      "",
      "# -----------------------------------------------------------------------------",
      "# -- custom module import",
      "# -----------------------------------------------------------------------------",
      "",
      "",
      "# -----------------------------------------------------------------------------",
      "# -- logging",
      "# -----------------------------------------------------------------------------",
      "",
      "logger = logging.getLogger(__name__)",
      "",
      "${3}"
    ],
    "description": "File entry level template for a default python file layout with copyright, author info, and structured sections."
  },
  "Region": {
    "scope": "python",
    "prefix": "synregion",
    "body": [
      "# -----------------------------------------------------------------------------",
      "# region ${1:region name}",
      "# -----------------------------------------------------------------------------",
      "",
      "${2:implementation}",
      "",
      "# endregion ${1:region name}",
      "# -----------------------------------------------------------------------------"
    ],
    "description": "Region template for a default Python region layout."
  },
  "Public methods Region": {
    "scope": "python",
    "prefix": "synpubregion",
    "body": [
      "# -----------------------------------------------------------------------------",
      "# region Public methods",
      "# -----------------------------------------------------------------------------",
      "",
      "${1:implementation}",
      "",
      "# endregion Public methods",
      "# -----------------------------------------------------------------------------"
    ],
    "description": "Template for a section to define public methods in python."
  },
  "Private methods Region": {
    "scope": "python",
    "prefix": "synprivregion",
    "body": [
      "# -----------------------------------------------------------------------------",
      "# region Private methods",
      "# -----------------------------------------------------------------------------",
      "",
      "${1:implementation}",
      "",
      "# endregion Private methods",
      "# -----------------------------------------------------------------------------"
    ],
    "description": "Template for a section to define private methods in python."
  },
  "Class Properties Region": {
    "scope": "python",
    "prefix": "synpropregion",
    "body": [
      "# -----------------------------------------------------------------------------",
      "# region Properties",
      "# -----------------------------------------------------------------------------",
      "",
      "@property",
      "def ${1:name}(self) -> ${2:rettype}:",
      "    ${3:implementation}",
      "",
      "# endregion Properties",
      "# -----------------------------------------------------------------------------"
    ],
    "description": "Template for a section to define class properties in python."
  },
  "Class Init": {
    "scope": "python",
    "prefix": "syninit",
    "body": [
      "# -----------------------------------------------------------------------------",
      "# Init",
      "# -----------------------------------------------------------------------------",
      "def __init__(self, ${1:parameters}) -> None:",
      "    ${2:implementation}",
      ""
    ],
    "description": "Template for a section to define a class init method in python."
  },
  "Class New": {
    "scope": "python",
    "prefix": "synnew",
    "body": [
      "# -----------------------------------------------------------------------------",
      "# New",
      "# -----------------------------------------------------------------------------",
      "def __new__(cls, ${1:parameters}) -> None:",
      "    ${2:implementation}",
      ""
    ],
    "description": "Template for a section to define a class new method in python."
  },
  "Class BuiltIn": {
    "scope": "python",
    "prefix": "synbuiltin",
    "body": [
      "# -----------------------------------------------------------------------------",
      "# ${1:name}",
      "# -----------------------------------------------------------------------------",
      "def __${1:name}__(self, ${2:parameters}) -> ${3:rettype}:",
      "    ${4:implementation}",
      ""
    ],
    "description": "Template for a section to define a class init method in python."
  },
  "Instance method": {
    "scope": "python",
    "prefix": "synmethod",
    "body": [
      "# -----------------------------------------------------------------------------",
      "def ${1:name}(self, ${2:kwargs}) -> ${3:return type}:",
      "    ${4:implementation}",
      "",
    ],
    "description": "Extended template for a Synergetik style instance methods."
  },
  "Class method": {
    "scope": "python",
    "prefix": "synclassmethod",
    "body": [
      "# -----------------------------------------------------------------------------",
      "@classmethod",
      "def ${1:name}(cls, ${2:kwargs}) -> ${3:return type}:",
      "    ${4:implementation}",
      "",
    ],
    "description": "Extended template for a Synergetik style class methods."
  },
  "Static method": {
    "scope": "python",
    "prefix": "synstaticmethod",
    "body": [
      "# -----------------------------------------------------------------------------",
      "def ${1:name}(${2:kwargs}) -> ${3:return type}:",
      "    ${4:implementation}",
      "",
    ],
    "description": "Extended template for a Synergetik style static member methods."
  },
  "Class Template": {
    "scope": "python",
    "prefix": "synclass",
    "body": [
      "# -----------------------------------------------------------------------------",
      "# region ${1:class name} class",
      "# -----------------------------------------------------------------------------",
      "",
      "",
      "class ${1:class name}:",
      "",
      "    # -----------------------------------------------------------------------------",
      "    # Type hints for instance members (do NOT initialize here)",
      "    # -----------------------------------------------------------------------------",
      "",
      "    ${2: implementation}",
      "",
      "# endregion ${1:class name} class",
      "# -----------------------------------------------------------------------------",
      "",
    ],
    "description": "Extended template for a Synergetik style class layout."
  },
  "Module main method Template": {
    "scope": "python",
    "prefix": "synmodulemain",
    "body": [
      "# -----------------------------------------------------------------------------",
      "# region Main",
      "# -----------------------------------------------------------------------------",
      "",
      "# -----------------------------------------------------------------------------",
      "# Main method",
      "# -----------------------------------------------------------------------------",
      "",
      "def main() -> None:",
      "    ${1:main implementation}",
      "",
      "# -----------------------------------------------------------------------------",
      "# Main execution",
      "# -----------------------------------------------------------------------------",
      "",
      "if __name__ == \"__main__\":",
      "    configure_logger()",
      "    main()",
      "",
      "# endregion Main",
      "# -----------------------------------------------------------------------------",
      "",
    ],
    "description": "Template for a main method part of a module."
  },
}
